{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reading a 2D obj file\n",
    "Reading a 2D .obj file with material IDs and boundary IDs.\n",
    "\n",
    "Click here for more information on [WaveFront objects,\n",
    "    aka obj](https://en.wikipedia.org/wiki/Wavefront_.obj_file)\n",
    "\n",
    "To run the code, simply type: `jupyter nbconvert --to python --execute <basename>.ipynb`.\n",
    "\n",
    "To convert it to a python file (named `<basename>.py`), simply type: `jupyter nbconvert --to python <basename>.ipynb`\n",
    "\n",
    "To run the python file from the terminal, using N processes, simply type: `mpiexec -n <N> python <basename>.py`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "from mpi4py import MPI\n",
    "\n",
    "sys.path.append(\"../..\")\n",
    "\n",
    "from pyopensn.mesh import FromFileMeshGenerator, PETScGraphPartitioner\n",
    "from pyopensn.context import UseColor, Finalize\n",
    "\n",
    "UseColor(False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Mesh and  Partition\n",
    "We have created an unstructured triangular mesh with the\n",
    "[Triangle Mesh Generator](http://www.cs.cmu.edu/~quake/triangle.html).\n",
    "Triangle is also accessible via [Meshpy](https://documen.tician.de/meshpy/) in python.\n",
    "Then, we converted the data generated by Triangle into the Wavefront (obj) format.\n",
    "\n",
    "We use the ```FromFileMeshGenerator``` and pass the path to the obj file.\n",
    "\n",
    "We also partition the 2D mesh into 4 subdomains using `Parmetis` (by running using `mpiexec -n 4 ...`).\n",
    "\n",
    "Finally, we export the mesh to a VTU file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [],
   "source": [
    "meshgen = FromFileMeshGenerator(\n",
    "    filename=\"../../../../test/assets/mesh/GMSH_AllTets.vtu\",\n",
    "    partitioner=PETScGraphPartitioner(type='parmetis'),\n",
    ")\n",
    "grid = meshgen.Execute()\n",
    "\n",
    "# Export\n",
    "grid.ExportToPVTU(\"Read_3D_vtu\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualization\n",
    "\n",
    "The resulting mesh and material layout is shown below:\n",
    "\n",
    "![Mesh_Material](images/Triangle_1542_mesh_material.png)\n",
    "\n",
    "When using the Parmetis partitioner and 4 MPI ranks, we obtain:\n",
    "\n",
    "![Mesh_Partition](images/Triangle_1542_partition_Parmetis.png)\n",
    "\n",
    "FYI, had we chosen the KBA partitioner, the partition would have been:\n",
    "\n",
    "![Mesh_Partition](images/Triangle_1542_partition_KBA.png)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finalize (for Jupyter Notebook only)\n",
    "\n",
    "In Python script mode, PyOpenSn automatically handles environment termination. However, this\n",
    "automatic finalization does not occur when running in a Jupyter notebook, so explicit finalization\n",
    "of the environment at the end of the notebook is required. Do not call the finalization in Python\n",
    "script mode, or in console mode.\n",
    "\n",
    "Note that PyOpenSn's finalization must be called before MPI's finalization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [],
   "source": [
    "from IPython import get_ipython\n",
    "\n",
    "def finalize_env():\n",
    "    Finalize()\n",
    "    MPI.Finalize()\n",
    "\n",
    "ipython_instance = get_ipython()\n",
    "if ipython_instance is not None:\n",
    "    ipython_instance.events.register(\"post_execute\", finalize_env)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
