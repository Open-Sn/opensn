{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simplified Linear Discontinuous Finite Element (LDFE) Quadrature\n",
    "This set uses the simplified Linear Discontinuous Finite Element (LDFE) quadrature.\n",
    "\n",
    "To run the code, simply type: `jupyter nbconvert --to python --execute <basename>.ipynb`.\n",
    "\n",
    "To convert it to a python file (named `<basename>.py`), simply type: `jupyter nbconvert --to python <basename>.ipynb`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import numpy as np\n",
    "\n",
    "sys.path.append(\"../../..\")\n",
    "\n",
    "from pyopensn.aquad import SLDFESQuadrature\n",
    "from pyopensn.context import UseColor, Finalize\n",
    "from pyopensn.math import Vector3\n",
    "\n",
    "UseColor(False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example-1: sLDFE Quadrature parameters\n",
    "\n",
    "Here, we use the sLDFE Quadrature with 4 levels of uniform refinement, followed by 2 levels of local refinements.\n",
    "\n",
    "The local refinement happens around point $P=[1/\\sqrt{3},1/\\sqrt{3},1/\\sqrt{3}]$. The first local refinement is for a cone of $\\theta=30^o$\n",
    "around that point, and the second refinement for a cone of $\\theta=10^o$.\n",
    "\n",
    "When the last argument (boolean variable) is ``False``, the refinement of the spherical quadrangles is performed when this condition is met:\n",
    "$$\n",
    "\\vec{OP} \\cdot \\vec{OC} > \\cos{\\theta}\n",
    "$$\n",
    "where $O$ is the origin of the sphere, $P$ is the user-supplied point (if $\\|\\vec{OP}\\| \\ne 1$, that vector is automatically normalized), and $C$ is the centroid of any spherical quadrangle.\n",
    "\n",
    "Hence, this leads to local refinement around point $P$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [],
   "source": [
    "# Create a sLDFE quadrature with initial refinement level of 4.\n",
    "aquad = SLDFESQuadrature(4)\n",
    "# Locally refine the quadrature near a given point with a given angular spread.\n",
    "# 30-degree cone around point [1/np.sqrt(3), 1/np.sqrt(3), 1/np.sqrt(3)]\n",
    "aquad.LocallyRefine(Vector3(1/np.sqrt(3), 1/np.sqrt(3), 1/np.sqrt(3)), 30.0 * np.pi / 180, False)\n",
    "# 10-degree cone around point [1/np.sqrt(3), 1/np.sqrt(3), 1/np.sqrt(3)]\n",
    "aquad.LocallyRefine(Vector3(1/np.sqrt(3), 1/np.sqrt(3), 1/np.sqrt(3)), 10.0 * np.pi / 180, False)\n",
    "aquad.PrintQuadratureToFile(\"sLDFE_data1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot the resulting quadrature\n",
    "We use the plotting routine found in the `tools/` folder of OpenSn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add path to sLDFE plotter\n",
    "sys.path.append(\"../../../tools/ang_quad_plotting\")\n",
    "# import the module\n",
    "from plot_sldfe_quadrature import plot_sldfe_quadrature\n",
    "\n",
    "sys.path.append(\"./\")\n",
    "plot_sldfe_quadrature(\"sLDFE_data1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The resulting plot should be obtained\n",
    "\n",
    "![quad1](images/sLDFE1.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example-2: sLDFE Quadrature parameters\n",
    "## Example-1: sLDFE Quadrature parameters\n",
    "\n",
    "Here, we use the sLDFE Quadrature with 4 levels of uniform refinement, followed by 2 levels of local refinements.\n",
    "\n",
    "The local refinement happens around point $P=[0,0,1]$. The first local refinement is for a cone of $\\theta=15^o$\n",
    "around that point, and the second refinement for a cone of $\\theta=4^o$.\n",
    "\n",
    "When the last argument (boolean variable) is ``True``, the refinement of the spherical quadrangles is performed when this condition is met:\n",
    "$$\n",
    "| \\vec{OP} \\cdot \\vec{OC}| < \\sin{\\theta}\n",
    "$$\n",
    "Hence, this leads to planar or banded refinement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [],
   "source": [
    "# Create a sLDFE quadrature with initial refinement level of 4.\n",
    "aquad = SLDFESQuadrature(4)\n",
    "# Locally refine the quadrature near a given point with a given angular spread.\n",
    "# 30-degree cone around point [1/np.sqrt(3), 1/np.sqrt(3), 1/np.sqrt(3)]\n",
    "aquad.LocallyRefine(Vector3(0., 0., 1.), 15.0 * np.pi / 180, True)\n",
    "# 10-degree cone around point [1/np.sqrt(3), 1/np.sqrt(3), 1/np.sqrt(3)]\n",
    "aquad.LocallyRefine(Vector3(0., 0., 1.), 4.0 * np.pi / 180, True)\n",
    "aquad.PrintQuadratureToFile(\"sLDFE_data2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot the resulting quadrature\n",
    "We use the plotting routine found in the `tools/` folder of OpenSn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_sldfe_quadrature(\"sLDFE_data2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The resulting plot should be obtained\n",
    "\n",
    "![quad2](images/sLDFE2.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import glob\n",
    "# Get a list of all files matching the pattern\n",
    "files_to_remove = glob.glob(\"sLDFE_data*.csv\")\n",
    "\n",
    "# Loop through each file and remove it\n",
    "for file in files_to_remove:\n",
    "    os.remove(file)\n",
    "    print(f\"Removed: {file}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finalize (for Jupyter Notebook only)\n",
    "\n",
    "In Python script mode, PyOpenSn automatically handles environment termination. However, this\n",
    "automatic finalization does not occur when running in a Jupyter notebook, so explicit finalization\n",
    "of the environment at the end of the notebook is required. Do not call the finalization in Python\n",
    "script mode, or in console mode.\n",
    "\n",
    "Note that PyOpenSn's finalization must be called before MPI's finalization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [],
   "source": [
    "from IPython import get_ipython\n",
    "\n",
    "def finalize_env():\n",
    "    Finalize()\n",
    "    MPI.Finalize()\n",
    "\n",
    "ipython_instance = get_ipython()\n",
    "if ipython_instance is not None:\n",
    "    ipython_instance.events.register(\"post_execute\", finalize_env)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
