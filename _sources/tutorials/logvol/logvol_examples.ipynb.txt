{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Logical Volumes\n",
    "We read a 3D tetrahedral mesh with uniform `blockID`. Then we use several logical volumes to modify the blockIDs for some portion of the original mesh.\n",
    "\n",
    "To run the code, simply type: `jupyter nbconvert --to python --execute <basename>.ipynb`.\n",
    "\n",
    "To convert it to a python file (named `<basename>.py`), simply type: `jupyter nbconvert --to python <basename>.ipynb`\n",
    "\n",
    "To run the python file from the terminal, using N processes, simply type: `mpiexec -n <N> python <basename>.py`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import numpy as np\n",
    "from mpi4py import MPI\n",
    "\n",
    "sys.path.append(\"../..\")\n",
    "\n",
    "from pyopensn.mesh import FromFileMeshGenerator, OrthogonalMeshGenerator, SurfaceMesh\n",
    "from pyopensn.logvol import RCCLogicalVolume, RPPLogicalVolume, SphereLogicalVolume, BooleanLogicalVolume, SurfaceMeshLogicalVolume\n",
    "from pyopensn.context import UseColor, Finalize\n",
    "from pyopensn.math import Vector3\n",
    "\n",
    "UseColor(False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Original Mesh\n",
    "We use ```FromFileMeshGenerator``` to read the mesh, and then export it to a VTU file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [],
   "source": [
    "meshgen = FromFileMeshGenerator(filename=\"simple_cube_fine.msh\")\n",
    "grid = meshgen.Execute()\n",
    "\n",
    "# Export\n",
    "grid.ExportToPVTU(\"original_mesh\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualization\n",
    "The resulting mesh and material layout is shown below:\n",
    "\n",
    "<img src=\"images/cube_tets_original.png\" \n",
    "     alt=\"Original Mesh\" \n",
    "     width=\"50%\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Right-Circular Cylinder as Logical Volumes\n",
    "We use two RCCs to change the blockID in two locations in the domain."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reset to uniform material layout (useful when running the notebook)\n",
    "grid.SetUniformBlockID(1)\n",
    "\n",
    "# first RCC\n",
    "lv1 = RCCLogicalVolume(r=0.4, x0=0., y0=-0.5, z0=0., vx=0., vy=1.5, vz=0.)\n",
    "grid.SetBlockIDFromLogicalVolume(lv1, 2, True)\n",
    "\n",
    "# second RCC\n",
    "lv2 = RCCLogicalVolume(\n",
    "    r=0.4,\n",
    "    x0=0.9,\n",
    "    y0=-0.8,\n",
    "    z0=-0.7,\n",
    "    vx=-0.5,\n",
    "    vy=1.0,\n",
    "    vz=3.0,\n",
    ")\n",
    "grid.SetBlockIDFromLogicalVolume(lv2, 3, True)\n",
    "\n",
    "# Export\n",
    "grid.ExportToPVTU(\"RCC_mesh\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualization\n",
    "<img src=\"images/cube_tets_rcc.png\" \n",
    "     alt=\"Modified Mesh\" \n",
    "     width=\"50%\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rectangular Parallelepiped as Logical Volumes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reset to uniform material layout (useful when running the notebook)\n",
    "grid.SetUniformBlockID(1)\n",
    "\n",
    "# RPP\n",
    "lv3 = RPPLogicalVolume(xmin=-0.5, xmax=0.5, infy=True, infz=True)\n",
    "grid.SetBlockIDFromLogicalVolume(lv3, 2, True)\n",
    "\n",
    "# Export\n",
    "grid.ExportToPVTU(\"RPP_mesh\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualization\n",
    "<img src=\"images/cube_tets_rpp.png\" \n",
    "     alt=\"Modified Mesh\" \n",
    "     width=\"50%\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sphere as Logical Volumes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reset to uniform material layout (useful when running the notebook)\n",
    "grid.SetUniformBlockID(1)\n",
    "\n",
    "# Sphere\n",
    "lv4 = SphereLogicalVolume(r=0.5, x=0., y=0., z=0.)\n",
    "grid.SetBlockIDFromLogicalVolume(lv4, 2, True)\n",
    "\n",
    "# Export\n",
    "grid.ExportToPVTU(\"Sphere_mesh\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualization\n",
    "<img src=\"images/cube_tets_sphere.png\" \n",
    "     alt=\"Modified Mesh\" \n",
    "     width=\"50%\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using a Python Function instead of Logical Volumes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reset to uniform material layout (useful when running the notebook)\n",
    "grid.SetUniformBlockID(1)\n",
    "\n",
    "# Python function describing a sphere (material 2)\n",
    "def MatIDFunction1(pt, cur_id):\n",
    "    y0 = 0.5\n",
    "    if np.sqrt(pt.x * pt.x + (pt.y - y0)**2  + pt.z * pt.z) < 0.5:\n",
    "        return 2\n",
    "    return cur_id\n",
    "\n",
    "# Assign block ID 2 to lv using Python function\n",
    "grid.SetBlockIDFromFunction(MatIDFunction1)\n",
    "\n",
    "# Export\n",
    "grid.ExportToPVTU(\"Sphere2_mesh\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualization\n",
    "<img src=\"images/cube_tets_sphere2.png\" \n",
    "     alt=\"Modified Mesh\" \n",
    "     width=\"50%\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Boolean Operations on Logical Volumes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reset to uniform material layout (useful when running the notebook)\n",
    "grid.SetUniformBlockID(1)\n",
    "\n",
    "# Create logical volume lv1 as an analytical sphere\n",
    "lv1 = SphereLogicalVolume(r=0.5, x=0.0, y=0.0, z=0.0)\n",
    "\n",
    "# Create logical volume lv2 as an analytical rcc\n",
    "lv2 = RCCLogicalVolume(\n",
    "    r=0.5,\n",
    "    x0=0.,\n",
    "    y0=0.,\n",
    "    z0=-1.5,\n",
    "    vx=0.0,\n",
    "    vy=0.0,\n",
    "    vz=3.0,\n",
    ")\n",
    "\n",
    "# Create logical volume lv3 as boolean: True if cell is in lv2 and False if in lv1\n",
    "lv3 = BooleanLogicalVolume(parts=[\n",
    "    {\"op\": True, \"lv\": lv2},\n",
    "    {\"op\": False, \"lv\": lv1}\n",
    "])\n",
    "\n",
    "# Assign block ID 2 to all cells in lv3 which is the part of lv2 that is not in lv1\n",
    "grid.SetBlockIDFromLogicalVolume(lv3, 2, True)\n",
    "\n",
    "# Assign block ID 3 to all cells in lv1\n",
    "grid.SetBlockIDFromLogicalVolume(lv1, 3, True)\n",
    "\n",
    "# Export\n",
    "grid.ExportToPVTU(\"Bool_mesh\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualization\n",
    "<img src=\"images/cube_tets_bool.png\" \n",
    "     alt=\"Modified Mesh\" \n",
    "     width=\"50%\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using a Skinmesh as Logical Volume\n",
    "A skin mesh is the surface mesh of the outer boundary (“skin”) of a 3D volume mesh."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up orthogonal 3D geometry\n",
    "nodes = []\n",
    "N = 50\n",
    "L = 5.0\n",
    "xmin = -L / 2\n",
    "dx = L / N\n",
    "for i in range(N + 1):\n",
    "    nodes.append(xmin + i * dx)\n",
    "meshgen = OrthogonalMeshGenerator(node_sets=[nodes, nodes, nodes])\n",
    "grid = meshgen.Execute()\n",
    "\n",
    "# Assign blockID of 1 to the whole domain\n",
    "grid.SetUniformBlockID(1)\n",
    "\n",
    "# Create a logical volume as an analytical RPP\n",
    "lv = RPPLogicalVolume(\n",
    "    xmin=-0.5,\n",
    "    xmax=0.5,\n",
    "    ymin=0.8,\n",
    "    ymax=1.5,\n",
    "    zmin=-1.5,\n",
    "    zmax=0.5,\n",
    ")\n",
    "# Assign mat ID 2 to lv of RPP\n",
    "grid.SetBlockIDFromLogicalVolume(lv, 2, True)\n",
    "\n",
    "# Create a logical volume as the interior of a skin mesh\n",
    "surfmesh = SurfaceMesh()\n",
    "surfmesh.ImportFromOBJFile(\"./cube_with_normals.obj\", False, Vector3(0, 0, 0))\n",
    "lv_skinmesh = SurfaceMeshLogicalVolume(surface_mesh=surfmesh)\n",
    "# Assign mat ID 3 to lv of skin mesh\n",
    "grid.SetBlockIDFromLogicalVolume(lv_skinmesh, 3, True)\n",
    "\n",
    "# Export to vtk\n",
    "grid.ExportToPVTU(\"lv_skinmesh\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualization\n",
    "<img src=\"images/skin.png\" \n",
    "     alt=\"Modified Mesh\" \n",
    "     width=\"50%\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finalize (for Jupyter Notebook only)\n",
    "\n",
    "In Python script mode, PyOpenSn automatically handles environment termination. However, this\n",
    "automatic finalization does not occur when running in a Jupyter notebook, so explicit finalization\n",
    "of the environment at the end of the notebook is required. Do not call the finalization in Python\n",
    "script mode, or in console mode.\n",
    "\n",
    "Note that PyOpenSn's finalization must be called before MPI's finalization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [],
   "source": [
    "from IPython import get_ipython\n",
    "\n",
    "def finalize_env():\n",
    "    Finalize()\n",
    "    MPI.Finalize()\n",
    "\n",
    "ipython_instance = get_ipython()\n",
    "if ipython_instance is not None:\n",
    "    ipython_instance.events.register(\"post_execute\", finalize_env)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
