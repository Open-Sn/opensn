
.. _program_listing_file_modules_linear_boltzmann_solvers_discrete_ordinates_problem_sweep_angle_set_aah_angle_set.h:

Program Listing for File aah_angle_set.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_modules_linear_boltzmann_solvers_discrete_ordinates_problem_sweep_angle_set_aah_angle_set.h>` (``modules/linear_boltzmann_solvers/discrete_ordinates_problem/sweep/angle_set/aah_angle_set.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // SPDX-FileCopyrightText: 2024 The OpenSn Authors <https://open-sn.github.io/opensn/>
   // SPDX-License-Identifier: MIT
   
   #pragma once
   
   #include "modules/linear_boltzmann_solvers/discrete_ordinates_problem/sweep/angle_set/angle_set.h"
   #include "modules/linear_boltzmann_solvers/discrete_ordinates_problem/sweep/communicators/aah_async_comm.h"
   
   namespace opensn
   {
   
   /// Manages the workstages of a single angle set.
   class AAH_AngleSet : public AngleSet
   {
   protected:
     AAH_ASynchronousCommunicator async_comm_;
   
   public:
     AAH_AngleSet(size_t id,
                  size_t num_groups,
                  const SPDS& spds,
                  std::shared_ptr<FLUDS>& fluds,
                  std::vector<size_t>& angle_indices,
                  std::map<uint64_t, std::shared_ptr<SweepBoundary>>& boundaries,
                  int maximum_message_size,
                  const MPICommunicatorSet& in_comm_set,
                  bool use_gpu);
   
     void InitializeDelayedUpstreamData() override;
   
     int GetMaxBufferMessages() const override;
   
     void SetMaxBufferMessages(int count) override;
   
     AngleSetStatus AngleSetAdvance(SweepChunk& sweep_chunk, AngleSetStatus permission) override;
   
     AngleSetStatus FlushSendBuffers() override;
   
     void ResetSweepBuffers() override;
   
     bool ReceiveDelayedData() override;
   
     const double* PsiBoundary(uint64_t boundary_id,
                               unsigned int angle_num,
                               uint64_t cell_local_id,
                               unsigned int face_num,
                               unsigned int fi,
                               int g,
                               bool surface_source_active) override;
   
     double* PsiReflected(uint64_t boundary_id,
                          unsigned int angle_num,
                          uint64_t cell_local_id,
                          unsigned int face_num,
                          unsigned int fi) override;
   };
   
   } // namespace opensn
