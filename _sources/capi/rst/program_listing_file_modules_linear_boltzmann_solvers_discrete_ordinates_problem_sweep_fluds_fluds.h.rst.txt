
.. _program_listing_file_modules_linear_boltzmann_solvers_discrete_ordinates_problem_sweep_fluds_fluds.h:

Program Listing for File fluds.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file_modules_linear_boltzmann_solvers_discrete_ordinates_problem_sweep_fluds_fluds.h>` (``modules/linear_boltzmann_solvers/discrete_ordinates_problem/sweep/fluds/fluds.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // SPDX-FileCopyrightText: 2024 The OpenSn Authors <https://open-sn.github.io/opensn/>
   // SPDX-License-Identifier: MIT
   
   #pragma once
   
   #include "modules/linear_boltzmann_solvers/discrete_ordinates_problem/sweep/fluds/fluds_common_data.h"
   #include <vector>
   #include <set>
   #include <cstddef>
   #include <cstdint>
   
   namespace opensn
   {
   
   class GridFaceHistogram;
   class SPDS;
   
   class FLUDS
   {
   public:
     FLUDS(size_t num_groups, size_t num_angles, const SPDS& spds)
       : num_groups_(num_groups),
         num_angles_(num_angles),
         num_groups_and_angles_(num_groups_ * num_angles_),
         spds_(spds) {};
   
     const SPDS& GetSPDS() const { return spds_; }
   
     virtual void ClearLocalAndReceivePsi() {}
     virtual void ClearSendPsi() {}
     virtual void AllocateInternalLocalPsi(size_t num_grps, size_t num_angles) {}
     virtual void AllocateOutgoingPsi(size_t num_grps, size_t num_angles, size_t num_loc_sucs) {}
   
     virtual void AllocateDelayedLocalPsi(size_t num_grps, size_t num_angles) {}
     virtual void AllocatePrelocIOutgoingPsi(size_t num_grps, size_t num_angles, size_t num_loc_deps)
     {
     }
     virtual void
     AllocateDelayedPrelocIOutgoingPsi(size_t num_grps, size_t num_angles, size_t num_loc_deps)
     {
     }
   
     virtual std::vector<double>& DelayedLocalPsi() = 0;
     virtual std::vector<double>& DelayedLocalPsiOld() = 0;
   
     virtual std::vector<std::vector<double>>& DeplocIOutgoingPsi() = 0;
   
     virtual std::vector<std::vector<double>>& PrelocIOutgoingPsi() = 0;
   
     virtual std::vector<std::vector<double>>& DelayedPrelocIOutgoingPsi() = 0;
   
     virtual std::vector<std::vector<double>>& DelayedPrelocIOutgoingPsiOld() = 0;
   
     virtual ~FLUDS() = default;
   
   protected:
     const size_t num_groups_;
     const size_t num_angles_;
     const size_t num_groups_and_angles_;
     const SPDS& spds_;
   };
   
   } // namespace opensn
